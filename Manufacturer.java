import java.util.ArrayList;
import java.util.List;

/**
 * The {@code Manufacturer} class represents a car manufacturer that manages multiple car models.
 * <p>
 * This class provides functionality to:
 * - Store the name of the manufacturer.
 * - Add and manage car models.
 * - Display all car models.
 * - Identify the most expensive car model.
 * - Calculate revenue generated by a specific car type.
 * - List car models above a certain price threshold.
 * </p>
 */
// Manufacturer class represents a car manufacturer that manages multiple car models
class Manufacturer {
    //attributes for the name of the manufacturer and the list of their car models
    private String Mname;
    private List<CarModel> carModels; // Store CarModel objects directly

    /**
     * Constructs a {@code Manufacturer} with the specified name.
     *
     * @param Mname the name of the manufacturer
     */
    // Constructor
    public Manufacturer(String Mname) {
        this.Mname = Mname;
        this.carModels = new ArrayList<>();
    }

    /**
     * Returns the name of the manufacturer.
     *
     * @return the manufacturer's name
     */
    // Getter method for manufacturer name
    public String getMname() {
        return Mname;
    }

    /**
     * Adds a car model to the manufacturer's list of car models.
     *
     * @param model the {@code CarModel} object to be added
     */
    // Method to add car models
    public void addCarModel(CarModel model) {
        carModels.add(model);
    }

    /**
     * Returns a list of all car models associated with this manufacturer.
     *
     * @return a list of {@code CarModel} objects
     */
    // Getter method for list of Car models
    public List<CarModel> getCarModels() {
        return carModels;
    }

    /**
     * Displays all car models associated with the manufacturer.
     * If no car models exist, an appropriate message is displayed.
     */
    // Method to display all car models of the manufacturer
    public void displayManufacturer() {
        System.out.println("Manufacturer: " + getMname());
        System.out.println("Car Models: ");

        // Loop through and print each car model's details
        for (CarModel model : carModels) {
            System.out.println(model.getName() + " Type: " + model.getType() + " Price: $" + model.getSales_price());
        }
    }


    /**
     * Finds and displays the most expensive car model manufactured by this manufacturer.
     * If no car models exist, a message is displayed.
     */
    // Method to find and display the most expensive car model
    public void displayMostExpensiveCarModel() {
        //check if the manufacturer has car models
        if (carModels.isEmpty()) {
            System.out.println("No car models available.");
            return;
        }

        //Assume first car model is the most expensive car model
        CarModel mostExpensive = carModels.get(0); // Assume first car is the most expensive

        // loop through the list to find the most expensive car
        for (CarModel model : carModels) {
            if (model.getSales_price() > mostExpensive.getSales_price()) {
                mostExpensive = model;
            }
        }

        // Print the most expensive car details
        System.out.println("\nMost Expensive Car Model:");
        System.out.println("Name: " + mostExpensive.getName());
        System.out.println("Weight: " + mostExpensive.getWeight());
        System.out.println("Sales Price: £" + mostExpensive.getSales_price());
        System.out.println("Number Sold: " + mostExpensive.getNSold());
        System.out.println("Type: " + mostExpensive.getType());
    }


    /**
     * Finds and displays the most expensive car model manufactured by this manufacturer.
     * If no car models exist, a message is displayed.
     */
    // Method to calculate total revenue generated by a specific car type
    public double calculateTotalRevenueByType(String carType) {
        double totalRevenue = 0.0;

        //validate the car type to prevent errors
        if (!carType.equalsIgnoreCase("hatchback") &&
                !carType.equalsIgnoreCase("saloon") &&
                !carType.equalsIgnoreCase("estate")) {
            System.out.println("Invalid car type. Please enter hatchback, saloon, or estate.");
            return totalRevenue;
        }

        // Loop through car models and calculate revenue for the specified type
        for (CarModel model : carModels) {
            if (model.getType().equalsIgnoreCase(carType)) {
                totalRevenue += model.getSales_price() * model.getNSold();
            }
        }

        // Display and return the total revenue
        System.out.println("\nTotal Revenue for " + carType + "s: £" + totalRevenue);
        return totalRevenue;
    }

    /**
     * Displays all car models that have a sales price greater than a specified amount.
     * If no models meet the criteria, a message is displayed.
     *
     * @param price the price threshold
     */
    // Method to get and display car models with a price greater than a given amount
    public void displayCarModelsAbovePrice(double price) {
        System.out.println("\nCar Models with a price greater than £" + price + ":");
        boolean found = false;

        // Loop through all car models and check if price is above the given threshold
        for (CarModel model : carModels) {
            if (model.getSales_price() > price) {
                System.out.println(model.getName() + " (£" + model.getSales_price() + ")");
                found = true;
            }
        }

        // If no models were found above the given price, display a message
        if (!found) {
            System.out.println("No car models found above £" + price);
        }
    }

    // Main method for testing
    public static void main(String[] args) {
        try {
            // Create manufacturer object
            Manufacturer manufacturer = new Manufacturer("Tesla");

            // Create CarModel objects
            CarModel car1 = new CarModel("Model X", 1800, 50000, 10000, "Hatchback");
            CarModel car2 = new CarModel("Model Y", 1500, 40000, 8000, "Saloon");
            CarModel car3 = new CarModel("Model Z", 2000, 70000, 5000, "Estate");
            CarModel car4 = new CarModel("Model A", 1700, 30000, 12000, "Hatchback");
            // stops the program as the car model isn't a valid type CarModel car5 = new CarModel("Model A", 1800, 50000, 10000, "SUV");

            // Add car models to manufacturer
            manufacturer.addCarModel(car1);
            manufacturer.addCarModel(car2);
            manufacturer.addCarModel(car3);
            manufacturer.addCarModel(car4);

            // Display all car models
            manufacturer.displayManufacturer();

            // Find and display the most expensive car model
            manufacturer.displayMostExpensiveCarModel();

            // Calculate and display revenue for each type
            manufacturer.calculateTotalRevenueByType("Hatchback");
            manufacturer.calculateTotalRevenueByType("Saloon");
            manufacturer.calculateTotalRevenueByType("Estate");

            // Find and display cars priced above £45000
            manufacturer.displayCarModelsAbovePrice(45000);
            //Find and display cars prices above £1000000
            manufacturer.displayCarModelsAbovePrice(1000000);

        } catch (IllegalArgumentException e) {
            // Catch and display any validation errors
            System.out.println("Error: " + e.getMessage());
        }
    }
}